# frozen_string_literal: true
require 'rails_helper'

require 'test_helpers'
RSpec.configure do |c|
  c.include TestHelpers
end

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::FoodsController, type: :controller do
  
  before(:each) do
    @admin_user = create_admin
    request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(@admin_user.api_key)
  end

  # This should return the minimal set of attributes required to create a valid
  # Food. As you add validations to Food, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "ketchup"}
  }

  let(:invalid_attributes) {
    { name: ""}
  }

  describe "GET #index" do
    it "assigns all foods as @foods" do
      food = FactoryGirl.create(:food)
      get :index, params: {}
      expect(assigns(:foods)).to eq([food])
    end
  end

  describe "GET #show" do
    it "assigns the requested food as @food" do
      food = FactoryGirl.create(:food)
      get :show, params: {id: food.to_param}
      expect(assigns(:food)).to eq(food)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Food" do
        expect {
          post :create, params: {food: valid_attributes}
        }.to change(Food, :count).by(1)
      end

      it "assigns a newly created food as @food" do
        post :create, params: {food: valid_attributes}
        expect(assigns(:food)).to be_a(Food)
        expect(assigns(:food)).to be_persisted
      end

      it "returns a :created http response" do
        post :create, params: {food: valid_attributes}
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved food as @food" do
        post :create, params: {food: invalid_attributes}
        expect(assigns(:food)).to be_a_new(Food)
      end

      it "eturns an :unprocessable_entity http response" do
        post :create, params: {food: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: "updated name" }
      }

      it "updates the requested food" do
        food = FactoryGirl.create(:food)
        put :update, params: {id: food.to_param, food: new_attributes}
        food.reload
        expect(food).to have_attributes(new_attributes)
      end

      it "assigns the requested food as @food" do
        food = FactoryGirl.create(:food)
        put :update, params: {id: food.to_param, food: valid_attributes}
        expect(assigns(:food)).to eq(food)
      end

      it "returns 200 No Content http status" do
        food = FactoryGirl.create(:food)
        put :update, params: {id: food.to_param, food: valid_attributes}
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns the food as @food" do
        food = FactoryGirl.create(:food)
        put :update, params: {id: food.to_param, food: invalid_attributes}
        expect(assigns(:food)).to eq(food)
      end

      it "returns 422 Unprocessable Entity http status" do
        food = FactoryGirl.create(:food)
        put :update, params: {id: food.to_param, food: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested food" do
      food = FactoryGirl.create(:food)
      expect do
        delete :destroy, params: {id: food.to_param}
      end.to change(Food, :count).by(-1)
    end

    it "redirects to the foods list" do
      food = FactoryGirl.create(:food)
      delete :destroy, params: {id: food.to_param}
      expect(response).to have_http_status(:no_content)
    end
  end

end
